{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["import assert from 'assert';\n\n// Converter helpers for Joi types.\n\nlet TYPES = {\n\n  alternatives: (schema, joi) => {\n\n    var result = schema.oneOf = [];\n\n    joi._inner.matches.forEach(function (match) {\n\n      if (match.schema) {\n        return result.push(convert(match.schema));\n      }\n\n      if (!match.is) {\n        throw new Error('joi.when requires an \"is\"');\n      }\n      if (!(match.then || match.otherwise)) {\n        throw new Error('joi.when requires one or both of \"then\" and \"otherwise\"');\n      }\n\n      if (match.then) {\n        result.push(convert(match.then));\n      }\n\n      if (match.otherwise) {\n        result.push(convert(match.otherwise));\n      }\n\n    });\n    return schema;\n  },\n\n  date: (schema) => {\n    schema.type = 'string';\n    schema.format = 'date-time';\n    return schema;\n  },\n\n  any: (schema) => {\n    schema.type = [\n      \"array\",\n      \"boolean\",\n      'number',\n      \"object\",\n      'string',\n      \"null\"\n    ];\n    return schema;\n  },\n\n  array: (schema, joi) => {\n    schema.type = 'array';\n\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'unique':\n          schema.uniqueItems = true;\n          break;\n        case 'length':\n          schema.minItems = schema.maxItems = test.arg;\n          break;\n        case 'min':\n          schema.minItems = test.arg;\n          break;\n        case 'max':\n          schema.maxItems = test.arg;\n          break;\n      }\n    });\n\n    if (joi._inner) {\n      let list;\n      if (joi._inner.inclusions.length) {\n        list = joi._inner.inclusions;\n      } else if (joi._inner.requireds.length) {\n        list = joi._inner.requireds;\n      }\n\n      if (list) {\n        schema.items = schema.items || [];\n        list.forEach((i) => {\n          schema.items.push(convert(i));\n        });\n      }\n    }\n\n    return schema;\n  },\n\n  boolean: (schema) => {\n    schema.type = 'boolean';\n    return schema;\n  },\n\n  number: (schema, joi) => {\n    schema.type = 'number';\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'integer':\n          schema.type = 'integer';\n          break;\n        case 'less':\n          schema.exclusiveMaximum = true;\n          schema.maximum = test.arg;\n          break;\n        case 'greater':\n          schema.exclusiveMinimum = true;\n          schema.minimum = test.arg;\n          break;\n        case 'min':\n          schema.minimum = test.arg;\n          break;\n        case 'max':\n          schema.maximum = test.arg;\n          break;\n      }\n    });\n    return schema;\n  },\n\n  string: (schema, joi) => {\n    schema.type = 'string';\n\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'email':\n          schema.format = 'email';\n          break;\n        case 'regex':\n          schema.pattern = String(test.arg).replace(/^\\//,'').replace(/\\/$/,'');\n          break;\n        case 'min':\n          schema.minLength = test.arg;\n          break;\n        case 'max':\n          schema.maxLength = test.arg;\n          break;\n        case 'length':\n          schema.minLength = schema.maxLength = test.arg;\n          break;\n        case 'uri':\n          schema.format = 'uri';\n          break;\n      }\n    });\n\n    return schema;\n  },\n\n  object: (schema, joi) => {\n    schema.type = 'object';\n    schema.properties = {};\n    schema.additionalProperties = joi._flags.allowUnknown || false;\n\n    if (!joi._inner.children) {\n      return schema;\n    }\n\n    joi._inner.children.forEach((property) => {\n      if(property.schema._flags.presence !== 'forbidden') {\n        schema.properties[property.key] = convert(property.schema);\n        if (property.schema._flags.presence === 'required') {\n          schema.required = schema.required || [];\n          schema.required.push(property.key);\n        }\n      }\n    });\n\n    return schema;\n  }\n};\n\n/**\n * Converts the supplied joi validation object into a JSON schema object,\n * optionally applying a transformation.\n *\n * @param {JoiValidation} joi\n * @param {TransformFunction} [transformer=null]\n * @returns {JSONSchema}\n */\nexport default function convert(joi,transformer=null) {\n\n  assert('object'===typeof joi && true === joi.isJoi, 'requires a joi schema object');\n\n  assert(joi._type, 'joi schema object must have a type');\n\n  if(!TYPES[joi._type]){\n    throw new Error(`sorry, do not know how to convert unknown joi type: \"${joi._type}\"`);\n  }\n\n  if(transformer){\n    assert('function'===typeof transformer, 'transformer must be a function');\n  }\n\n  // JSON Schema root for this type.\n  let schema = {};\n\n  // Copy over the details that all schemas may have...\n  if (joi._description) {\n    schema.description = joi._description;\n  }\n\n  // Add the label as a title if it exists\n  if (joi._settings && joi._settings.language && joi._settings.language.label) {\n    schema.title = joi._settings.language.label;\n  }\n\n  if (joi._flags && joi._flags.default) {\n    schema['default'] = joi._flags.default;\n  }\n\n  if (joi._valids && joi._valids._set && joi._valids._set.length){\n    if(Array.isArray(joi._inner.children)) {\n      return {\n        '------oneOf': [\n          {\n            'type': joi._type,\n            'enum': joi._valids._set\n          },\n          TYPES[joi._type](schema, joi)\n        ]\n      };\n    }\n    schema['enum']=joi._valids._set;\n  }\n\n  let result = TYPES[joi._type](schema, joi);\n\n  if(transformer){\n    result = transformer(result);\n  }\n\n  return result;\n}\n\n/**\n * Joi Validation Object\n * @typedef {object} JoiValidation\n */\n\n/**\n * Transformation Function - applied just before `convert()` returns and called as `function(object):object`\n * @typedef {function} TransformFunction\n */\n\n/**\n * JSON Schema Object\n * @typedef {object} JSONSchema\n */\n"]}